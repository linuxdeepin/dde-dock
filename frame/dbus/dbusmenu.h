/*
 * Copyright (C) 2015 ~ 2018 Deepin Technology Co., Ltd.
 *
 * Author:     sbw <sbw@sbw.so>
 *
 * Maintainer: sbw <sbw@sbw.so>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusMenu -p dbusmenu com.deepin.menu.Menu.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSMENU_H_1436158836
#define DBUSMENU_H_1436158836

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.menu.Menu
 */
class DBusMenu: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticServerPath()
    { return "com.deepin.menu"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.menu.Menu"; }

public:
    DBusMenu(const QString &path,QObject *parent = 0);

    ~DBusMenu();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> SetItemActivity(const QString &itemId, bool isActive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(isActive);
        return asyncCallWithArgumentList(QStringLiteral("SetItemActivity"), argumentList);
    }

    inline QDBusPendingReply<> SetItemChecked(const QString &itemId, bool checked)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(checked);
        return asyncCallWithArgumentList(QStringLiteral("SetItemChecked"), argumentList);
    }

    inline QDBusPendingReply<> SetItemText(const QString &itemId, const QString &text)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(text);
        return asyncCallWithArgumentList(QStringLiteral("SetItemText"), argumentList);
    }

    inline QDBusPendingReply<> ShowMenu(const QString &menuJsonContent)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(menuJsonContent);
        return asyncCallWithArgumentList(QStringLiteral("ShowMenu"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemInvoked(const QString &itemId, bool checked);
    void MenuUnregistered();
};

namespace com {
  namespace deepin {
    namespace menu {
      typedef ::DBusMenu Menu;
    }
  }
}
#endif
