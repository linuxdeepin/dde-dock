/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusAudio -p dbusaudio com.deepin.daemon.Audio.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSAUDIO_H_1470120815
#define DBUSAUDIO_H_1470120815

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Audio
 */
class DBusAudio: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.Audio")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Audio"; }

public:
    explicit DBusAudio(QObject *parent = 0);

    ~DBusAudio();

    Q_PROPERTY(QString Cards READ cards NOTIFY CardsChanged)
    inline QString cards()
    { return qvariant_cast< QString >(property("Cards")); }

    Q_PROPERTY(QDBusObjectPath DefaultSink READ defaultSink NOTIFY DefaultSinkChanged)
    inline QDBusObjectPath defaultSink()
    { return qvariant_cast< QDBusObjectPath >(property("DefaultSink")); }

    Q_PROPERTY(QDBusObjectPath DefaultSource READ defaultSource NOTIFY DefaultSourceChanged)
    inline QDBusObjectPath defaultSource()
    { return qvariant_cast< QDBusObjectPath >(property("DefaultSource")); }

    Q_PROPERTY(double MaxUIVolume READ maxUIVolume NOTIFY MaxUIVolumeChanged)
    inline double maxUIVolume()
    { return qvariant_cast< double >(property("MaxUIVolume")); }

    Q_PROPERTY(QList<QDBusObjectPath> SinkInputs READ sinkInputs NOTIFY SinkInputsChanged)
    inline QList<QDBusObjectPath> sinkInputs()
    { return qvariant_cast< QList<QDBusObjectPath> >(property("SinkInputs")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSink(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSink"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSource(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSource"), argumentList);
    }

    inline QDBusPendingReply<> SetPort(uint in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPort"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
    void CardsChanged() const;
    void DefaultSinkChanged() const;
    void DefaultSourceChanged() const;
    void MaxUIVolumeChanged() const;
    void SinkInputsChanged() const;
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DBusAudio DBusAudio;
    }
  }
}
#endif
