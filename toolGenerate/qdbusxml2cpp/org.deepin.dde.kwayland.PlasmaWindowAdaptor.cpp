/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-dock/frame/dbusinterface/xml/org.deepin.dde.kwayland.PlasmaWindow.xml -a ./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.kwayland.PlasmaWindowAdaptor -i ./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.kwayland.PlasmaWindow.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.kwayland.PlasmaWindowAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PlasmaWindowAdaptor
 */

PlasmaWindowAdaptor::PlasmaWindowAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PlasmaWindowAdaptor::~PlasmaWindowAdaptor()
{
    // destructor
}

QString PlasmaWindowAdaptor::AppId()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.AppId
    QString out0;
    QMetaObject::invokeMethod(parent(), "AppId", Q_RETURN_ARG(QString, out0));
    return out0;
}

void PlasmaWindowAdaptor::Destroy()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Destroy
    QMetaObject::invokeMethod(parent(), "Destroy");
}

DockRect PlasmaWindowAdaptor::Geometry()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Geometry
    DockRect out0;
    QMetaObject::invokeMethod(parent(), "Geometry", Q_RETURN_ARG(DockRect, out0));
    return out0;
}

QString PlasmaWindowAdaptor::Icon()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Icon
    QString out0;
    QMetaObject::invokeMethod(parent(), "Icon", Q_RETURN_ARG(QString, out0));
    return out0;
}

uint PlasmaWindowAdaptor::InternalId()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.InternalId
    uint out0;
    QMetaObject::invokeMethod(parent(), "InternalId", Q_RETURN_ARG(uint, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsActive()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsActive
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsActive", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsCloseable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsCloseable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsCloseable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsDemandingAttention()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsDemandingAttention
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsDemandingAttention", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsFullscreen()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsFullscreen
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsFullscreen", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsFullscreenable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsFullscreenable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsFullscreenable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsKeepAbove()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsKeepAbove
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsKeepAbove", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsKeepBelow()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsKeepBelow
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsKeepBelow", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsMaximizeable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsMaximizeable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsMaximizeable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsMaximized()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsMaximized
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsMaximized", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsMinimizeable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsMinimizeable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsMinimizeable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsMinimized()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsMinimized
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsMinimized", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsMovable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsMovable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsMovable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsOnAllDesktops()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsOnAllDesktops
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsOnAllDesktops", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsResizable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsResizable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsResizable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsShadeable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsShadeable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsShadeable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsShaded()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsShaded
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsShaded", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsValid()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsValid
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsValid", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::IsVirtualDesktopChangeable()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.IsVirtualDesktopChangeable
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsVirtualDesktopChangeable", Q_RETURN_ARG(bool, out0));
    return out0;
}

uint PlasmaWindowAdaptor::Pid()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Pid
    uint out0;
    QMetaObject::invokeMethod(parent(), "Pid", Q_RETURN_ARG(uint, out0));
    return out0;
}

QStringList PlasmaWindowAdaptor::PlasmaVirtualDesktops()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.PlasmaVirtualDesktops
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "PlasmaVirtualDesktops", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

void PlasmaWindowAdaptor::Release()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Release
    QMetaObject::invokeMethod(parent(), "Release");
}

void PlasmaWindowAdaptor::RequestActivate()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestActivate
    QMetaObject::invokeMethod(parent(), "RequestActivate");
}

void PlasmaWindowAdaptor::RequestClose()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestClose
    QMetaObject::invokeMethod(parent(), "RequestClose");
}

void PlasmaWindowAdaptor::RequestEnterNewVirtualDesktop()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestEnterNewVirtualDesktop
    QMetaObject::invokeMethod(parent(), "RequestEnterNewVirtualDesktop");
}

void PlasmaWindowAdaptor::RequestEnterVirtualDesktop(const QString &id)
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestEnterVirtualDesktop
    QMetaObject::invokeMethod(parent(), "RequestEnterVirtualDesktop", Q_ARG(QString, id));
}

void PlasmaWindowAdaptor::RequestLeaveVirtualDesktop(const QString &id)
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestLeaveVirtualDesktop
    QMetaObject::invokeMethod(parent(), "RequestLeaveVirtualDesktop", Q_ARG(QString, id));
}

void PlasmaWindowAdaptor::RequestMove()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestMove
    QMetaObject::invokeMethod(parent(), "RequestMove");
}

void PlasmaWindowAdaptor::RequestResize()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestResize
    QMetaObject::invokeMethod(parent(), "RequestResize");
}

void PlasmaWindowAdaptor::RequestToggleKeepAbove()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestToggleKeepAbove
    QMetaObject::invokeMethod(parent(), "RequestToggleKeepAbove");
}

void PlasmaWindowAdaptor::RequestToggleKeepBelow()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestToggleKeepBelow
    QMetaObject::invokeMethod(parent(), "RequestToggleKeepBelow");
}

void PlasmaWindowAdaptor::RequestToggleMaximized()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestToggleMaximized
    QMetaObject::invokeMethod(parent(), "RequestToggleMaximized");
}

void PlasmaWindowAdaptor::RequestToggleMinimized()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestToggleMinimized
    QMetaObject::invokeMethod(parent(), "RequestToggleMinimized");
}

void PlasmaWindowAdaptor::RequestToggleShaded()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestToggleShaded
    QMetaObject::invokeMethod(parent(), "RequestToggleShaded");
}

void PlasmaWindowAdaptor::RequestVirtualDesktop(uint desktop)
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.RequestVirtualDesktop
    QMetaObject::invokeMethod(parent(), "RequestVirtualDesktop", Q_ARG(uint, desktop));
}

bool PlasmaWindowAdaptor::SkipSwitcher()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.SkipSwitcher
    bool out0;
    QMetaObject::invokeMethod(parent(), "SkipSwitcher", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool PlasmaWindowAdaptor::SkipTaskbar()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.SkipTaskbar
    bool out0;
    QMetaObject::invokeMethod(parent(), "SkipTaskbar", Q_RETURN_ARG(bool, out0));
    return out0;
}

QString PlasmaWindowAdaptor::Title()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.Title
    QString out0;
    QMetaObject::invokeMethod(parent(), "Title", Q_RETURN_ARG(QString, out0));
    return out0;
}

uint PlasmaWindowAdaptor::VirtualDesktop()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.VirtualDesktop
    uint out0;
    QMetaObject::invokeMethod(parent(), "VirtualDesktop", Q_RETURN_ARG(uint, out0));
    return out0;
}

uint PlasmaWindowAdaptor::WindowId()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.WindowId
    uint out0;
    QMetaObject::invokeMethod(parent(), "WindowId", Q_RETURN_ARG(uint, out0));
    return out0;
}

QByteArray PlasmaWindowAdaptor::uuid()
{
    // handle method call org.deepin.dde.KWayland1.PlasmaWindow.uuid
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "uuid", Q_RETURN_ARG(QByteArray, out0));
    return out0;
}

