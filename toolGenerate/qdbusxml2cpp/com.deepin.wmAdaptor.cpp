/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-dock/frame/dbusinterface/xml/com.deepin.wm.xml -a ./dde-dock/toolGenerate/qdbusxml2cpp/com.deepin.wmAdaptor -i ./dde-dock/toolGenerate/qdbusxml2cpp/com.deepin.wm.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-dock/toolGenerate/qdbusxml2cpp/com.deepin.wmAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class WmAdaptor
 */

WmAdaptor::WmAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

WmAdaptor::~WmAdaptor()
{
    // destructor
}

bool WmAdaptor::compositingAllowSwitch() const
{
    // get the value of property compositingAllowSwitch
    return qvariant_cast< bool >(parent()->property("compositingAllowSwitch"));
}

bool WmAdaptor::compositingEnabled() const
{
    // get the value of property compositingEnabled
    return qvariant_cast< bool >(parent()->property("compositingEnabled"));
}

void WmAdaptor::setCompositingEnabled(bool value)
{
    // set the value of property compositingEnabled
    parent()->setProperty("compositingEnabled", QVariant::fromValue(value));
}

bool WmAdaptor::compositingPossible() const
{
    // get the value of property compositingPossible
    return qvariant_cast< bool >(parent()->property("compositingPossible"));
}

int WmAdaptor::cursorSize() const
{
    // get the value of property cursorSize
    return qvariant_cast< int >(parent()->property("cursorSize"));
}

void WmAdaptor::setCursorSize(int value)
{
    // set the value of property cursorSize
    parent()->setProperty("cursorSize", QVariant::fromValue(value));
}

QString WmAdaptor::cursorTheme() const
{
    // get the value of property cursorTheme
    return qvariant_cast< QString >(parent()->property("cursorTheme"));
}

void WmAdaptor::setCursorTheme(const QString &value)
{
    // set the value of property cursorTheme
    parent()->setProperty("cursorTheme", QVariant::fromValue(value));
}

bool WmAdaptor::zoneEnabled() const
{
    // get the value of property zoneEnabled
    return qvariant_cast< bool >(parent()->property("zoneEnabled"));
}

void WmAdaptor::setZoneEnabled(bool value)
{
    // set the value of property zoneEnabled
    parent()->setProperty("zoneEnabled", QVariant::fromValue(value));
}

void WmAdaptor::BeginToMoveActiveWindow()
{
    // handle method call com.deepin.wm.BeginToMoveActiveWindow
    QMetaObject::invokeMethod(parent(), "BeginToMoveActiveWindow");
}

void WmAdaptor::CancelPreviewWindow()
{
    // handle method call com.deepin.wm.CancelPreviewWindow
    QMetaObject::invokeMethod(parent(), "CancelPreviewWindow");
}

void WmAdaptor::ChangeCurrentWorkspaceBackground(const QString &uri)
{
    // handle method call com.deepin.wm.ChangeCurrentWorkspaceBackground
    QMetaObject::invokeMethod(parent(), "ChangeCurrentWorkspaceBackground", Q_ARG(QString, uri));
}

void WmAdaptor::EnableZoneDetected(bool enabled)
{
    // handle method call com.deepin.wm.EnableZoneDetected
    QMetaObject::invokeMethod(parent(), "EnableZoneDetected", Q_ARG(bool, enabled));
}

QStringList WmAdaptor::GetAccel(const QString &id)
{
    // handle method call com.deepin.wm.GetAccel
    QStringList data;
    QMetaObject::invokeMethod(parent(), "GetAccel", Q_RETURN_ARG(QStringList, data), Q_ARG(QString, id));
    return data;
}

QString WmAdaptor::GetAllAccels()
{
    // handle method call com.deepin.wm.GetAllAccels
    QString data;
    QMetaObject::invokeMethod(parent(), "GetAllAccels", Q_RETURN_ARG(QString, data));
    return data;
}

int WmAdaptor::GetCurrentWorkspace()
{
    // handle method call com.deepin.wm.GetCurrentWorkspace
    int index;
    QMetaObject::invokeMethod(parent(), "GetCurrentWorkspace", Q_RETURN_ARG(int, index));
    return index;
}

QString WmAdaptor::GetCurrentWorkspaceBackground()
{
    // handle method call com.deepin.wm.GetCurrentWorkspaceBackground
    QString result;
    QMetaObject::invokeMethod(parent(), "GetCurrentWorkspaceBackground", Q_RETURN_ARG(QString, result));
    return result;
}

QString WmAdaptor::GetCurrentWorkspaceBackgroundForMonitor(const QString &strMonitorName)
{
    // handle method call com.deepin.wm.GetCurrentWorkspaceBackgroundForMonitor
    QString result;
    QMetaObject::invokeMethod(parent(), "GetCurrentWorkspaceBackgroundForMonitor", Q_RETURN_ARG(QString, result), Q_ARG(QString, strMonitorName));
    return result;
}

QStringList WmAdaptor::GetDefaultAccel(const QString &id)
{
    // handle method call com.deepin.wm.GetDefaultAccel
    QStringList data;
    QMetaObject::invokeMethod(parent(), "GetDefaultAccel", Q_RETURN_ARG(QStringList, data), Q_ARG(QString, id));
    return data;
}

bool WmAdaptor::GetIsShowDesktop()
{
    // handle method call com.deepin.wm.GetIsShowDesktop
    bool isShowDesktop;
    QMetaObject::invokeMethod(parent(), "GetIsShowDesktop", Q_RETURN_ARG(bool, isShowDesktop));
    return isShowDesktop;
}

bool WmAdaptor::GetMultiTaskingStatus()
{
    // handle method call com.deepin.wm.GetMultiTaskingStatus
    bool isActive;
    QMetaObject::invokeMethod(parent(), "GetMultiTaskingStatus", Q_RETURN_ARG(bool, isActive));
    return isActive;
}

QString WmAdaptor::GetWorkspaceBackground(int index)
{
    // handle method call com.deepin.wm.GetWorkspaceBackground
    QString result;
    QMetaObject::invokeMethod(parent(), "GetWorkspaceBackground", Q_RETURN_ARG(QString, result), Q_ARG(int, index));
    return result;
}

QString WmAdaptor::GetWorkspaceBackgroundForMonitor(int index, const QString &strMonitorName)
{
    // handle method call com.deepin.wm.GetWorkspaceBackgroundForMonitor
    QString result;
    QMetaObject::invokeMethod(parent(), "GetWorkspaceBackgroundForMonitor", Q_RETURN_ARG(QString, result), Q_ARG(int, index), Q_ARG(QString, strMonitorName));
    return result;
}

void WmAdaptor::MinimizeActiveWindow()
{
    // handle method call com.deepin.wm.MinimizeActiveWindow
    QMetaObject::invokeMethod(parent(), "MinimizeActiveWindow");
}

void WmAdaptor::NextWorkspace()
{
    // handle method call com.deepin.wm.NextWorkspace
    QMetaObject::invokeMethod(parent(), "NextWorkspace");
}

void WmAdaptor::PerformAction(int type)
{
    // handle method call com.deepin.wm.PerformAction
    QMetaObject::invokeMethod(parent(), "PerformAction", Q_ARG(int, type));
}

void WmAdaptor::PresentWindows(const QList<uint> &xids)
{
    // handle method call com.deepin.wm.PresentWindows
    QMetaObject::invokeMethod(parent(), "PresentWindows", Q_ARG(QList<uint>, xids));
}

void WmAdaptor::PreviewWindow(uint xid)
{
    // handle method call com.deepin.wm.PreviewWindow
    QMetaObject::invokeMethod(parent(), "PreviewWindow", Q_ARG(uint, xid));
}

void WmAdaptor::PreviousWorkspace()
{
    // handle method call com.deepin.wm.PreviousWorkspace
    QMetaObject::invokeMethod(parent(), "PreviousWorkspace");
}

void WmAdaptor::RemoveAccel(const QString &id)
{
    // handle method call com.deepin.wm.RemoveAccel
    QMetaObject::invokeMethod(parent(), "RemoveAccel", Q_ARG(QString, id));
}

bool WmAdaptor::SetAccel(const QString &data)
{
    // handle method call com.deepin.wm.SetAccel
    bool result;
    QMetaObject::invokeMethod(parent(), "SetAccel", Q_RETURN_ARG(bool, result), Q_ARG(QString, data));
    return result;
}

void WmAdaptor::SetCurrentWorkspace(int index)
{
    // handle method call com.deepin.wm.SetCurrentWorkspace
    QMetaObject::invokeMethod(parent(), "SetCurrentWorkspace", Q_ARG(int, index));
}

void WmAdaptor::SetCurrentWorkspaceBackground(const QString &uri)
{
    // handle method call com.deepin.wm.SetCurrentWorkspaceBackground
    QMetaObject::invokeMethod(parent(), "SetCurrentWorkspaceBackground", Q_ARG(QString, uri));
}

void WmAdaptor::SetCurrentWorkspaceBackgroundForMonitor(const QString &uri, const QString &strMonitorName)
{
    // handle method call com.deepin.wm.SetCurrentWorkspaceBackgroundForMonitor
    QMetaObject::invokeMethod(parent(), "SetCurrentWorkspaceBackgroundForMonitor", Q_ARG(QString, uri), Q_ARG(QString, strMonitorName));
}

void WmAdaptor::SetDecorationDeepinTheme(const QString &deepinThemeName)
{
    // handle method call com.deepin.wm.SetDecorationDeepinTheme
    QMetaObject::invokeMethod(parent(), "SetDecorationDeepinTheme", Q_ARG(QString, deepinThemeName));
}

void WmAdaptor::SetDecorationTheme(const QString &themeType, const QString &themeName)
{
    // handle method call com.deepin.wm.SetDecorationTheme
    QMetaObject::invokeMethod(parent(), "SetDecorationTheme", Q_ARG(QString, themeType), Q_ARG(QString, themeName));
}

void WmAdaptor::SetMultiTaskingStatus(bool isActive)
{
    // handle method call com.deepin.wm.SetMultiTaskingStatus
    QMetaObject::invokeMethod(parent(), "SetMultiTaskingStatus", Q_ARG(bool, isActive));
}

void WmAdaptor::SetShowDesktop(bool isShowDesktop)
{
    // handle method call com.deepin.wm.SetShowDesktop
    QMetaObject::invokeMethod(parent(), "SetShowDesktop", Q_ARG(bool, isShowDesktop));
}

void WmAdaptor::SetTransientBackground(const QString &in0)
{
    // handle method call com.deepin.wm.SetTransientBackground
    QMetaObject::invokeMethod(parent(), "SetTransientBackground", Q_ARG(QString, in0));
}

void WmAdaptor::SetTransientBackgroundForMonitor(const QString &uri, const QString &strMonitorName)
{
    // handle method call com.deepin.wm.SetTransientBackgroundForMonitor
    QMetaObject::invokeMethod(parent(), "SetTransientBackgroundForMonitor", Q_ARG(QString, uri), Q_ARG(QString, strMonitorName));
}

void WmAdaptor::SetWorkspaceBackground(int index, const QString &uri)
{
    // handle method call com.deepin.wm.SetWorkspaceBackground
    QMetaObject::invokeMethod(parent(), "SetWorkspaceBackground", Q_ARG(int, index), Q_ARG(QString, uri));
}

void WmAdaptor::SetWorkspaceBackgroundForMonitor(int index, const QString &strMonitorName, const QString &uri)
{
    // handle method call com.deepin.wm.SetWorkspaceBackgroundForMonitor
    QMetaObject::invokeMethod(parent(), "SetWorkspaceBackgroundForMonitor", Q_ARG(int, index), Q_ARG(QString, strMonitorName), Q_ARG(QString, uri));
}

void WmAdaptor::ShowAllWindow()
{
    // handle method call com.deepin.wm.ShowAllWindow
    QMetaObject::invokeMethod(parent(), "ShowAllWindow");
}

void WmAdaptor::ShowWindow()
{
    // handle method call com.deepin.wm.ShowWindow
    QMetaObject::invokeMethod(parent(), "ShowWindow");
}

void WmAdaptor::ShowWorkspace()
{
    // handle method call com.deepin.wm.ShowWorkspace
    QMetaObject::invokeMethod(parent(), "ShowWorkspace");
}

void WmAdaptor::SwitchApplication(bool backward)
{
    // handle method call com.deepin.wm.SwitchApplication
    QMetaObject::invokeMethod(parent(), "SwitchApplication", Q_ARG(bool, backward));
}

void WmAdaptor::SwitchToWorkspace(bool backward)
{
    // handle method call com.deepin.wm.SwitchToWorkspace
    QMetaObject::invokeMethod(parent(), "SwitchToWorkspace", Q_ARG(bool, backward));
}

void WmAdaptor::TileActiveWindow(uint side)
{
    // handle method call com.deepin.wm.TileActiveWindow
    QMetaObject::invokeMethod(parent(), "TileActiveWindow", Q_ARG(uint, side));
}

void WmAdaptor::ToggleActiveWindowMaximize()
{
    // handle method call com.deepin.wm.ToggleActiveWindowMaximize
    QMetaObject::invokeMethod(parent(), "ToggleActiveWindowMaximize");
}

int WmAdaptor::WorkspaceCount()
{
    // handle method call com.deepin.wm.WorkspaceCount
    int count;
    QMetaObject::invokeMethod(parent(), "WorkspaceCount", Q_RETURN_ARG(int, count));
    return count;
}

