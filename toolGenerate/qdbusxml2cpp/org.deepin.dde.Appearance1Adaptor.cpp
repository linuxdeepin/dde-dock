/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-dock/frame/dbusinterface/xml/org.deepin.dde.Appearance1.xml -a ./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.Appearance1Adaptor -i ./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.Appearance1.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-dock/toolGenerate/qdbusxml2cpp/org.deepin.dde.Appearance1Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class Appearance1Adaptor
 */

Appearance1Adaptor::Appearance1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

Appearance1Adaptor::~Appearance1Adaptor()
{
    // destructor
}

QString Appearance1Adaptor::background() const
{
    // get the value of property Background
    return qvariant_cast< QString >(parent()->property("Background"));
}

QString Appearance1Adaptor::cursorTheme() const
{
    // get the value of property CursorTheme
    return qvariant_cast< QString >(parent()->property("CursorTheme"));
}

double Appearance1Adaptor::fontSize() const
{
    // get the value of property FontSize
    return qvariant_cast< double >(parent()->property("FontSize"));
}

void Appearance1Adaptor::setFontSize(double value)
{
    // set the value of property FontSize
    parent()->setProperty("FontSize", QVariant::fromValue(value));
}

QString Appearance1Adaptor::globalTheme() const
{
    // get the value of property GlobalTheme
    return qvariant_cast< QString >(parent()->property("GlobalTheme"));
}

QString Appearance1Adaptor::gtkTheme() const
{
    // get the value of property GtkTheme
    return qvariant_cast< QString >(parent()->property("GtkTheme"));
}

QString Appearance1Adaptor::iconTheme() const
{
    // get the value of property IconTheme
    return qvariant_cast< QString >(parent()->property("IconTheme"));
}

QString Appearance1Adaptor::monospaceFont() const
{
    // get the value of property MonospaceFont
    return qvariant_cast< QString >(parent()->property("MonospaceFont"));
}

double Appearance1Adaptor::opacity() const
{
    // get the value of property Opacity
    return qvariant_cast< double >(parent()->property("Opacity"));
}

void Appearance1Adaptor::setOpacity(double value)
{
    // set the value of property Opacity
    parent()->setProperty("Opacity", QVariant::fromValue(value));
}

QString Appearance1Adaptor::qtActiveColor() const
{
    // get the value of property QtActiveColor
    return qvariant_cast< QString >(parent()->property("QtActiveColor"));
}

void Appearance1Adaptor::setQtActiveColor(const QString &value)
{
    // set the value of property QtActiveColor
    parent()->setProperty("QtActiveColor", QVariant::fromValue(value));
}

QString Appearance1Adaptor::standardFont() const
{
    // get the value of property StandardFont
    return qvariant_cast< QString >(parent()->property("StandardFont"));
}

QString Appearance1Adaptor::wallpaperSlideShow() const
{
    // get the value of property WallpaperSlideShow
    return qvariant_cast< QString >(parent()->property("WallpaperSlideShow"));
}

void Appearance1Adaptor::setWallpaperSlideShow(const QString &value)
{
    // set the value of property WallpaperSlideShow
    parent()->setProperty("WallpaperSlideShow", QVariant::fromValue(value));
}

QString Appearance1Adaptor::wallpaperURls() const
{
    // get the value of property WallpaperURls
    return qvariant_cast< QString >(parent()->property("WallpaperURls"));
}

int Appearance1Adaptor::windowRadius() const
{
    // get the value of property WindowRadius
    return qvariant_cast< int >(parent()->property("WindowRadius"));
}

void Appearance1Adaptor::setWindowRadius(int value)
{
    // set the value of property WindowRadius
    parent()->setProperty("WindowRadius", QVariant::fromValue(value));
}

